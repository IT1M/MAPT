name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment configuration
        run: npm run validate:env
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: ESLint code quality check
        run: npm run lint

      - name: Validate translations
        run: npm run validate:translations

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Check bundle size
        run: |
          if [ -d ".next" ]; then
            echo "Build successful! Checking bundle sizes..."
            du -sh .next
            MAIN_BUNDLE_SIZE=$(find .next/static/chunks -name "main-*.js" -exec du -k {} \; | cut -f1)
            if [ ! -z "$MAIN_BUNDLE_SIZE" ] && [ "$MAIN_BUNDLE_SIZE" -gt 200 ]; then
              echo "‚ö†Ô∏è Warning: Main bundle size is ${MAIN_BUNDLE_SIZE}KB (target: <200KB)"
            else
              echo "‚úÖ Bundle size is acceptable"
            fi
          fi

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--build-env DATABASE_URL=${{ secrets.DATABASE_URL }} --build-env NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} --build-env NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} --build-env GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}'

      - name: Comment PR with deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Preview deployment ready!\n\nüîó **URL:** ${{ steps.vercel-deploy.outputs.preview-url }}\n\nüìä View deployment details on [Vercel Dashboard](https://vercel.com)`
            })

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Pre-migration safety checks
        run: npm run pre-migration-check
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_DIRECT || secrets.DATABASE_URL }}
          NODE_ENV: production

      - name: Run database migrations
        run: npm run migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_DIRECT || secrets.DATABASE_URL }}

      - name: Verify migration status
        run: npm run migrate:status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_DIRECT || secrets.DATABASE_URL }}

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --build-env DATABASE_URL=${{ secrets.DATABASE_URL }} --build-env NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} --build-env NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} --build-env GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}'

      - name: Log deployment success
        run: |
          echo "üöÄ Production deployment successful!"
          echo "üìä Deployment URL: ${{ steps.vercel-deploy.outputs.preview-url }}"
          echo "‚è∞ Deployed at: $(date)"

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            const message = status === 'success' 
              ? `${emoji} Production deployment successful!\n\nüîó **URL:** ${{ steps.vercel-deploy.outputs.preview-url }}\n‚è∞ **Time:** ${new Date().toISOString()}`
              : `${emoji} Production deployment failed!\n\n‚ö†Ô∏è Please check the workflow logs for details.`;
            
            console.log(message);

      - name: Send Slack notification (Optional)
        if: always() && vars.SLACK_WEBHOOK_URL != ''
        run: |
          STATUS="${{ job.status }}"
          EMOJI=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
          MESSAGE="$EMOJI Production Deployment $STATUS\nURL: ${{ steps.vercel-deploy.outputs.preview-url }}\nCommit: ${{ github.sha }}"
          
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{\"text\":\"$MESSAGE\"}" || echo "Slack notification skipped (webhook not configured)"
