'use client'

import React, { useState, useEffect } from 'react'
import { useTranslations } from '@/hooks/useTranslations'
import { downloadBlob } from '@/utils/download-helper'

export interface ExportModalProps {
  isOpen: boolean
  onClose: () => void
  entity: 'inventory' | 'audit' | 'reports' | 'users'
  filters?: Record<string, any>
  selectedIds?: string[]
  onExportComplete?: (success: boolean, format: string) => void
}

interface ColumnOption {
  key: string
  label: string
  selected: boolean
}

export const ExportModal: React.FC<ExportModalProps> = ({
  isOpen,
  onClose,
  entity,
  filters,
  selectedIds,
  onExportComplete,
}) => {
  const t = useTranslations()
  const [format, setFormat] = useState<'csv' | 'excel' | 'json' | 'pdf'>('excel')
  const [filename, setFilename] = useState(`${entity}-export`)
  const [includeFilters, setIncludeFilters] = useState(true)
  const [emailDelivery, setEmailDelivery] = useState(false)
  const [columns, setColumns] = useState<ColumnOption[]>([])
  const [isExporting, setIsExporting] = useState(false)
  const [progress, setProgress] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [estimatedRecords, setEstimatedRecords] = useState(0)

  // Initialize columns based on entity
  useEffect(() => {
    const entityColumns: Record<string, ColumnOption[]> = {
      inventory: [
        { key: 'itemName', label: 'Item Name', selected: true },
        { key: 'batch', label: 'Batch Number', selected: true },
        { key: 'quantity', label: 'Quantity', selected: true },
        { key: 'reject', label: 'Reject', selected: true },
        { key: 'rejectPercent', label: 'Reject %', selected: true },
        { key: 'destination', label: 'Destination', selected: true },
        { key: 'category', label: 'Category', selected: true },
        { key: 'notes', label: 'Notes', selected: false },
        { key: 'enteredBy', label: 'Entered By', selected: true },
        { key: 'dateAdded', label: 'Date Added', selected: true },
      ],
      audit: [
        { key: 'action', label: 'Action', selected: true },
        { key: 'entity', label: 'Entity', selected: true },
        { key: 'entityId', label: 'Entity ID', selected: true },
        { key: 'user', label: 'User', selected: true },
        { key: 'changes', label: 'Changes', selected: true },
        { key: 'timestamp', label: 'Timestamp', selected: true },
      ],
      reports: [
        { key: 'title', label: 'Title', selected: true },
        { key: 'type', label: 'Type', selected: true },
        { key: 'status', label: 'Status', selected: true },
        { key: 'generatedBy', label: 'Generated By', selected: true },
        { key: 'createdAt', label: 'Created At', selected: true },
      ],
      users: [
        { key: 'name', label: 'Name', selected: true },
        { key: 'email', label: 'Email', selected: true },
        { key: 'role', label: 'Role', selected: true },
        { key: 'active', label: 'Active', selected: true },
        { key: 'createdAt', label: 'Created At', selected: true },
        { key: 'lastLogin', label: 'Last Login', selected: true },
      ],
    }

    setColumns(entityColumns[entity] || [])
    
    // Estimate record count
    if (selectedIds && selectedIds.length > 0) {
      setEstimatedRecords(selectedIds.length)
    } else {
      // This would ideally come from an API call
      setEstimatedRecords(0)
    }
  }, [entity, selectedIds])

  const handleExport = async () => {
    setIsExporting(true)
    setProgress(0)
    setError(null)

    try {
      // Prepare selected columns
      const selectedColumns = columns
        .filter(col => col.selected)
        .map(col => col.key)

      setProgress(10)

      // Make API request
      const response = await fetch('/api/export', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          format,
          entity,
          filters,
          ids: selectedIds,
          columns: selectedColumns.length > 0 ? selectedColumns : undefined,
          filename,
          includeFilters,
          emailDelivery,
        }),
      })

      setProgress(50)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(errorData.error?.message || `Export failed with status ${response.status}`)
      }

      // Check if email delivery
      const contentType = response.headers.get('Content-Type')
      if (contentType?.includes('application/json')) {
        const result = await response.json()
        setProgress(100)
        
        if (result.emailSent) {
          alert('Export file will be sent to your email shortly')
        }
        
        if (onExportComplete) {
          onExportComplete(true, format)
        }
        
        onClose()
        return
      }

      // Download file
      const blob = await response.blob()
      setProgress(75)

      // Extract filename from Content-Disposition header
      const contentDisposition = response.headers.get('Content-Disposition')
      let downloadFilename = `${filename}.${format === 'excel' ? 'xlsx' : format}`
      
      if (contentDisposition) {
        const fileNameMatch = contentDisposition.match(/filename="?(.+)"?/)
        if (fileNameMatch) {
          downloadFilename = fileNameMatch[1]
        }
      }
      
      downloadBlob(blob, downloadFilename)

      setProgress(100)

      if (onExportComplete) {
        onExportComplete(true, format)
      }

      // Close modal after short delay
      setTimeout(() => {
        onClose()
      }, 500)
    } catch (error) {
      console.error('Export failed:', error)
      setError(error instanceof Error ? error.message : 'Export failed')
      
      if (onExportComplete) {
        onExportComplete(false, format)
      }
    } finally {
      setIsExporting(false)
      setProgress(0)
    }
  }

  const toggleColumn = (key: string) => {
    setColumns(prev =>
      prev.map(col =>
        col.key === key ? { ...col, selected: !col.selected } : col
      )
    )
  }

  const selectAllColumns = () => {
    setColumns(prev => prev.map(col => ({ ...col, selected: true })))
  }

  const deselectAllColumns = () => {
    setColumns(prev => prev.map(col => ({ ...col, selected: false })))
  }

  if (!isOpen) return null

  const selectedCount = columns.filter(col => col.selected).length
  const shouldShowEmailOption = estimatedRecords > 5000

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
              Export {entity.charAt(0).toUpperCase() + entity.slice(1)} Data
            </h2>
            <button
              onClick={onClose}
              disabled={isExporting}
              className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 disabled:opacity-50"
              aria-label="Close"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          {selectedIds && selectedIds.length > 0 && (
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
              Exporting {selectedIds.length} selected {selectedIds.length === 1 ? 'item' : 'items'}
            </p>
          )}
        </div>

        {/* Content */}
        <div className="px-6 py-4 overflow-y-auto flex-1">
          {/* Format Selection */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Export Format
            </label>
            <div className="grid grid-cols-2 gap-3">
              {(['csv', 'excel', 'json'] as const).map(fmt => (
                <button
                  key={fmt}
                  onClick={() => setFormat(fmt)}
                  disabled={isExporting}
                  className={`px-4 py-3 rounded-lg border-2 transition-colors ${
                    format === fmt
                      ? 'border-primary-600 bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  } disabled:opacity-50`}
                >
                  <div className="text-sm font-medium">{fmt.toUpperCase()}</div>
                  <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    {fmt === 'csv' && 'Spreadsheet compatible'}
                    {fmt === 'excel' && 'Formatted workbook'}
                    {fmt === 'json' && 'Structured data'}
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Filename */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Filename
            </label>
            <input
              type="text"
              value={filename}
              onChange={(e) => setFilename(e.target.value)}
              disabled={isExporting}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-gray-100 disabled:opacity-50"
              placeholder="export-filename"
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Extension will be added automatically
            </p>
          </div>

          {/* Column Selection */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-2">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Columns to Export ({selectedCount} selected)
              </label>
              <div className="flex gap-2">
                <button
                  onClick={selectAllColumns}
                  disabled={isExporting}
                  className="text-xs text-primary-600 hover:text-primary-700 dark:text-primary-400 disabled:opacity-50"
                >
                  Select All
                </button>
                <button
                  onClick={deselectAllColumns}
                  disabled={isExporting}
                  className="text-xs text-gray-600 hover:text-gray-700 dark:text-gray-400 disabled:opacity-50"
                >
                  Deselect All
                </button>
              </div>
            </div>
            <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-3 max-h-48 overflow-y-auto">
              <div className="grid grid-cols-2 gap-2">
                {columns.map(col => (
                  <label
                    key={col.key}
                    className="flex items-center gap-2 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded"
                  >
                    <input
                      type="checkbox"
                      checked={col.selected}
                      onChange={() => toggleColumn(col.key)}
                      disabled={isExporting}
                      className="rounded border-gray-300 text-primary-600 focus:ring-primary-500 disabled:opacity-50"
                    />
                    <span className="text-sm text-gray-700 dark:text-gray-300">
                      {col.label}
                    </span>
                  </label>
                ))}
              </div>
            </div>
          </div>

          {/* Options */}
          <div className="space-y-3 mb-6">
            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                checked={includeFilters}
                onChange={(e) => setIncludeFilters(e.target.checked)}
                disabled={isExporting}
                className="rounded border-gray-300 text-primary-600 focus:ring-primary-500 disabled:opacity-50"
              />
              <span className="text-sm text-gray-700 dark:text-gray-300">
                Include filter information in export
              </span>
            </label>

            {shouldShowEmailOption && (
              <label className="flex items-center gap-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={emailDelivery}
                  onChange={(e) => setEmailDelivery(e.target.checked)}
                  disabled={isExporting}
                  className="rounded border-gray-300 text-primary-600 focus:ring-primary-500 disabled:opacity-50"
                />
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  Send export via email (large dataset)
                </span>
              </label>
            )}
          </div>

          {/* Progress Bar */}
          {isExporting && (
            <div className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  Exporting...
                </span>
                <span className="text-sm font-medium text-primary-600 dark:text-primary-400">
                  {progress}%
                </span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <div
                  className="bg-primary-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${progress}%` }}
                />
              </div>
            </div>
          )}

          {/* Error Message */}
          {error && (
            <div className="mb-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
              <div className="flex items-start gap-2">
                <svg
                  className="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <div className="flex-1">
                  <p className="text-sm font-medium text-red-700 dark:text-red-300">
                    Export Failed
                  </p>
                  <p className="text-sm text-red-600 dark:text-red-400 mt-1">
                    {error}
                  </p>
                </div>
                <button
                  onClick={() => setError(null)}
                  className="text-red-400 hover:text-red-600 dark:hover:text-red-200"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between">
          <button
            onClick={onClose}
            disabled={isExporting}
            className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors disabled:opacity-50"
          >
            Cancel
          </button>
          <button
            onClick={handleExport}
            disabled={isExporting || selectedCount === 0}
            className="px-6 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
          >
            {isExporting ? (
              <>
                <svg className="w-4 h-4 animate-spin" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                </svg>
                <span>Exporting...</span>
              </>
            ) : (
              <>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span>Export</span>
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  )
}
