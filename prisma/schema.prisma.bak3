generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityLog {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     String
  metadata  Json?
  ipAddress String
  userAgent String
  sessionId String?
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
  @@index([event])
  @@map("activity_logs")
}

model AuditLog {
  id            String        @id
  timestamp     DateTime      @default(now())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  action        ActionType
  entityType    EntityType
  entityId      String
  changes       Json?
  ipAddress     String
  userAgent     String
  signature     String
  inventoryItem InventoryItem @relation(fields: [entityId], references: [id])

  @@index([timestamp])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@map("audit_logs")
}

model BackupConfig {
  id                     String         @id
  enabled                Boolean        @default(false)
  scheduleTime           String         @default("02:00")
  formats                BackupFormat[]
  includeAuditLogs       Boolean        @default(true)
  retentionDailyDays     Int            @default(30)
  retentionWeeklyWeeks   Int            @default(12)
  retentionMonthlyMonths Int            @default(12)
  storagePath            String
  updatedAt              DateTime
  updatedBy              String
  users                  users          @relation(fields: [updatedBy], references: [id])
}

model Backup {
  id               String       @id
  createdAt        DateTime     @default(now())
  fileSize         BigInt
  recordCount      Int
  status           BackupStatus
  checksum         String
  createdBy        String
  dateRangeFrom    DateTime?
  dateRangeTo      DateTime?
  encrypted        Boolean      @default(false)
  filename         String       @unique
  format           BackupFormat
  includeAuditLogs Boolean      @default(false)
  includeSettings  Boolean      @default(false)
  includeUserData  Boolean      @default(false)
  notes            String?
  type             BackupType
  validated        Boolean      @default(false)
  validatedAt      DateTime?
  users            users        @relation(fields: [createdBy], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([type])
}

model EmailLog {
  id           String      @id
  userId       String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  to           String
  from         String
  subject      String
  template     String
  status       EmailStatus @default(PENDING)
  sentAt       DateTime?
  failedAt     DateTime?
  errorMessage String?
  attempts     Int         @default(0)
  metadata     Json?
  createdAt    DateTime    @default(now())

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("email_logs")
}

model HelpArticle {
  id          String            @id
  title       String
  slug        String            @unique
  category    String
  content     String
  tags        String[]
  status      HelpArticleStatus @default(DRAFT)
  views       Int               @default(0)
  helpful     Int               @default(0)
  notHelpful  Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime
  publishedAt DateTime?

  @@index([slug])
  @@index([category])
  @@index([status])
  @@map("help_articles")
}

model InventoryItem {
  id          String       @id
  itemName    String
  batch       String
  quantity    Int
  reject      Int          @default(0)
  destination Destination
  category    String?
  notes       String?
  enteredById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
  audit_logs  audit_logs[]
  users       users        @relation(fields: [enteredById], references: [id])

  @@index([batch])
  @@index([createdAt, destination])
  @@index([createdAt])
  @@index([destination])
  @@index([itemName, batch])
  @@index([itemName])
}

model Notification {
  id        String               @id
  userId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  link      String?
  read      Boolean              @default(false)
  readAt    DateTime?
  priority  NotificationPriority @default(NORMAL)
  metadata  Json?
  createdAt DateTime             @default(now())
  expiresAt DateTime?

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

model PasswordResetToken {
  id        String    @id
  token     String    @unique
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model Product {
  id            String   @id
  name          String
  nameAr        String
  sku           String   @unique
  category      String
  description   String?
  descriptionAr String?
  unit          String
  minStockLevel Int
  maxStockLevel Int
  reorderPoint  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime
}

model ReportSchedule {
  id         String            @id
  name       String
  reportType ReportType
  frequency  ScheduleFrequency
  time       String
  recipients String[]
  enabled    Boolean           @default(true)
  config     Json
  lastRun    DateTime?
  nextRun    DateTime
  createdAt  DateTime          @default(now())
  createdBy  String
  users      users             @relation(fields: [createdBy], references: [id])

  @@index([enabled])
  @@index([nextRun])
}

model Report {
  id                String       @id
  title             String
  status            ReportStatus
  type              ReportType
  filePath          String
  fileSize          BigInt
  format            ReportFormat
  generatedAt       DateTime     @default(now())
  generatedBy       String
  includeAIInsights Boolean      @default(false)
  periodFrom        DateTime
  periodTo          DateTime
  users             users        @relation(fields: [generatedBy], references: [id])

  @@index([generatedAt])
  @@index([status])
  @@index([type])
}

model SavedFilter {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  filters   Json
  page      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([userId])
  @@index([userId, page])
  @@map("saved_filters")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  browser      String?
  createdAt    DateTime @default(now())
  deviceType   String?
  ipAddress    String?
  lastActive   DateTime @default(now())
  location     String?
  os           String?
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model SystemSettings {
  id          String   @id
  key         String   @unique
  value       Json
  updatedById String
  updatedAt   DateTime
  category    String
  users       users    @relation(fields: [updatedById], references: [id])

  @@index([category])
}

model Transaction {
  id              String          @id
  inventoryItemId String
  type            TransactionType
  quantity        Int
  reason          String?
  performedBy     String
  createdAt       DateTime        @default(now())
}

model TwoFactorAuth {
  id          String    @id
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret      String
  backupCodes String[]
  enabled     Boolean   @default(false)
  enabledAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime

  @@map("two_factor_auth")
}

model User {
  id                 String              @id
  email              String              @unique
  name               String
  passwordHash       String
  role               UserRole
  isActive           Boolean             @default(true)
  preferences        Json?               @default("{}")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  emailVerified      Boolean             @default(false)
  emailVerifiedAt    DateTime?
  lastLogin          DateTime?
  lastLoginIp        String?
  lockedUntil        DateTime?
  passwordChangedAt  DateTime?
  activityLogs       ActivityLog[]
  auditLogs          AuditLog[]
  backupConfigs      BackupConfig[]
  backups            Backup[]
  emailLogs          EmailLog[]
  inventoryItems     InventoryItem[]
  notifications      Notification[]
  passwordResetToken PasswordResetToken?
  reportSchedules    ReportSchedule[]
  reports            Report[]
  savedFilters       SavedFilter[]
  sessions           Session[]
  settingsUpdates    SystemSettings[]
  twoFactorAuth      TwoFactorAuth?

  @@index([email])
  @@map("users")
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  VIEW
  REVERT
  BACKUP
  RESTORE
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
}

enum BackupFileType {
  CSV
  JSON
  SQL
}

enum BackupFormat {
  CSV
  JSON
  SQL
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  CORRUPTED
}

enum BackupType {
  MANUAL
  AUTOMATIC
  PRE_RESTORE
}

enum Destination {
  MAIS
  FOZAN
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum EntityType {
  InventoryItem
  User
  Report
  Backup
  Settings
  AuditLog
}

enum HelpArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ItemStatus {
  AVAILABLE
  RESERVED
  EXPIRED
  DAMAGED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  SYSTEM
  ACTIVITY
  APPROVAL
  ALERT
  MENTION
}

enum ReportFormat {
  PDF
  EXCEL
  PPTX
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum ReportType {
  MONTHLY_INVENTORY
  YEARLY_SUMMARY
  CUSTOM_RANGE
  AUDIT_REPORT
  USER_ACTIVITY
  CATEGORY_ANALYSIS
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionType {
  RECEIVE
  ISSUE
  ADJUST
  TRANSFER
  DISPOSE
}

enum UserRole {
  ADMIN
  DATA_ENTRY
  SUPERVISOR
  MANAGER
  AUDITOR
}
