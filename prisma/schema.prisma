// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  DATA_ENTRY
  SUPERVISOR
  MANAGER
  AUDITOR
}

enum ItemStatus {
  AVAILABLE
  RESERVED
  EXPIRED
  DAMAGED
}

enum TransactionType {
  RECEIVE
  ISSUE
  ADJUST
  TRANSFER
  DISPOSE
}

enum Destination {
  MAIS
  FOZAN
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  VIEW
  REVERT
  BACKUP
  RESTORE
}

enum EntityType {
  InventoryItem
  User
  Report
  Backup
  Settings
  AuditLog
}

enum BackupType {
  MANUAL
  AUTOMATIC
  PRE_RESTORE
}

enum BackupFormat {
  CSV
  JSON
  SQL
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  CORRUPTED
}

enum ReportType {
  MONTHLY_INVENTORY
  YEARLY_SUMMARY
  CUSTOM_RANGE
  AUDIT_REPORT
  USER_ACTIVITY
  CATEGORY_ANALYSIS
}

enum ReportFormat {
  PDF
  EXCEL
  PPTX
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

// Legacy enums for backward compatibility
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
}

enum BackupFileType {
  CSV
  JSON
  SQL
}

// Models
model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String
  passwordHash    String
  role            UserRole
  isActive        Boolean          @default(true)
  preferences     Json?            @default("{}")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sessions        Session[]
  inventoryItems  InventoryItem[]
  auditLogs       AuditLog[]
  reports         Report[]
  backups         Backup[]         @relation("UserBackups")
  settingsUpdates SystemSettings[]
  reportSchedules ReportSchedule[]
  backupConfigs   BackupConfig[]

  @@index([email])
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  nameAr        String
  sku           String   @unique
  category      String
  description   String?
  descriptionAr String?
  unit          String
  minStockLevel Int
  maxStockLevel Int
  reorderPoint  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("products")
}

model InventoryItem {
  id          String      @id @default(cuid())
  itemName    String
  batch       String
  quantity    Int
  reject      Int         @default(0)
  destination Destination
  category    String?
  notes       String?     @db.Text
  enteredById String
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  enteredBy   User        @relation(fields: [enteredById], references: [id])
  auditLogs   AuditLog[]

  @@index([itemName])
  @@index([batch])
  @@index([createdAt])
  @@index([destination])
  @@index([itemName, batch])
  @@index([createdAt, destination])
  @@map("inventory_items")
}

model Transaction {
  id              String          @id @default(cuid())
  inventoryItemId String
  type            TransactionType
  quantity        Int
  reason          String?
  performedBy     String
  createdAt       DateTime        @default(now())

  @@map("transactions")
}

model AuditLog {
  id            String         @id @default(cuid())
  timestamp     DateTime       @default(now())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  action        ActionType
  entityType    EntityType
  entityId      String
  changes       Json?
  ipAddress     String
  userAgent     String
  signature     String
  inventoryItem InventoryItem? @relation(fields: [entityId], references: [id])

  @@index([timestamp])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@map("audit_logs")
}

// New models for enhanced functionality
model Report {
  id                String       @id @default(cuid())
  title             String
  type              ReportType
  periodFrom        DateTime
  periodTo          DateTime
  generatedAt       DateTime     @default(now())
  generatedBy       String
  generator         User         @relation(fields: [generatedBy], references: [id])
  fileSize          BigInt
  format            ReportFormat
  status            ReportStatus
  filePath          String
  includeAIInsights Boolean      @default(false)

  @@index([generatedAt])
  @@index([type])
  @@index([status])
  @@map("reports")
}

model Backup {
  id               String       @id @default(cuid())
  filename         String       @unique
  type             BackupType
  format           BackupFormat
  fileSize         BigInt
  recordCount      Int
  status           BackupStatus
  createdAt        DateTime     @default(now())
  createdBy        String
  creator          User         @relation("UserBackups", fields: [createdBy], references: [id])
  includeAuditLogs Boolean      @default(false)
  includeUserData  Boolean      @default(false)
  includeSettings  Boolean      @default(false)
  dateRangeFrom    DateTime?
  dateRangeTo      DateTime?
  notes            String?      @db.Text
  encrypted        Boolean      @default(false)
  checksum         String
  validated        Boolean      @default(false)
  validatedAt      DateTime?

  @@index([createdAt])
  @@index([status])
  @@index([type])
  @@map("backups")
}

model ReportSchedule {
  id         String            @id @default(cuid())
  name       String
  reportType ReportType
  frequency  ScheduleFrequency
  time       String
  recipients String[]
  enabled    Boolean           @default(true)
  config     Json
  lastRun    DateTime?
  nextRun    DateTime
  createdAt  DateTime          @default(now())
  createdBy  String
  creator    User              @relation(fields: [createdBy], references: [id])

  @@index([nextRun])
  @@index([enabled])
  @@map("report_schedules")
}

model BackupConfig {
  id                     String         @id @default(cuid())
  enabled                Boolean        @default(false)
  scheduleTime           String         @default("02:00")
  formats                BackupFormat[]
  includeAuditLogs       Boolean        @default(true)
  retentionDailyDays     Int            @default(30)
  retentionWeeklyWeeks   Int            @default(12)
  retentionMonthlyMonths Int            @default(12)
  storagePath            String
  updatedAt              DateTime       @updatedAt
  updatedBy              String
  updater                User           @relation(fields: [updatedBy], references: [id])

  @@map("backup_configs")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  category    String
  updatedById String
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation(fields: [updatedById], references: [id])

  @@index([category])
  @@map("system_settings")
}
